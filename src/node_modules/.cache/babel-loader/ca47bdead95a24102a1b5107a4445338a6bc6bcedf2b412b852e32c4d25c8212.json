{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\L\\xE9o\\\\Documents\\\\GitHub\\\\ReactJS\\\\src\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from './d3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = _ref => {\n  _s();\n  let {\n    nodes,\n    links\n  } = _ref;\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n\n    // Définir les dimensions du SVG\n    const width = 500;\n    const height = 500;\n\n    // Créer une simulation de force pour positionner les nœuds\n    const simulation = d3.forceSimulation(nodes).force('charge', d3.forceManyBody()).force('link', d3.forceLink(links)).force('x', d3.forceX(width / 2)).force('y', d3.forceY(height / 2));\n\n    // Ajouter des cercles pour les nœuds\n    const node = svg.selectAll('circle').data(nodes).enter().append('circle').attr('r', 10).attr('fill', 'steelblue');\n\n    // Ajouter des lignes pour les liens\n    const link = svg.selectAll('line').data(links).enter().append('line').attr('stroke', 'lightgrey').attr('stroke-width', 2);\n\n    // Mettre à jour les positions des nœuds et des liens pendant la simulation\n    simulation.on('tick', () => {\n      node.attr('cx', d => d.x).attr('cy', d => d.y);\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n    });\n  }, [nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: \"100%\",\n    height: \"500\",\n    children: /*#__PURE__*/_jsxDEV(\"g\", {\n      transform: \"translate(50, 50)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","Graph","nodes","links","svgRef","svg","select","current","width","height","simulation","forceSimulation","force","forceManyBody","forceLink","forceX","forceY","node","selectAll","data","enter","append","attr","link","on","d","x","y","source","target"],"sources":["C:/Users/Léo/Documents/GitHub/ReactJS/src/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from './d3.js';\r\n\r\nconst Graph = ({ nodes, links }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n\r\n    // Définir les dimensions du SVG\r\n    const width = 500;\r\n    const height = 500;\r\n\r\n    // Créer une simulation de force pour positionner les nœuds\r\n    const simulation = d3.forceSimulation(nodes)\r\n      .force('charge', d3.forceManyBody())\r\n      .force('link', d3.forceLink(links))\r\n      .force('x', d3.forceX(width / 2))\r\n      .force('y', d3.forceY(height / 2));\r\n\r\n    // Ajouter des cercles pour les nœuds\r\n    const node = svg.selectAll('circle')\r\n      .data(nodes)\r\n      .enter().append('circle')\r\n        .attr('r', 10)\r\n        .attr('fill', 'steelblue');\r\n\r\n    // Ajouter des lignes pour les liens\r\n    const link = svg.selectAll('line')\r\n      .data(links)\r\n      .enter().append('line')\r\n        .attr('stroke', 'lightgrey')\r\n        .attr('stroke-width', 2);\r\n\r\n    // Mettre à jour les positions des nœuds et des liens pendant la simulation\r\n    simulation.on('tick', () => {\r\n      node.attr('cx', d => d.x)\r\n          .attr('cy', d => d.y);\r\n\r\n      link.attr('x1', d => d.source.x)\r\n          .attr('y1', d => d.source.y)\r\n          .attr('x2', d => d.target.x)\r\n          .attr('y2', d => d.target.y);\r\n    });\r\n  }, [nodes, links]);\r\n\r\n  return (\r\n    <svg ref={svgRef} width=\"100%\" height=\"500\">\r\n      <g transform=\"translate(50, 50)\">\r\n        {/* Les nœuds et les liens seront ajoutés ici par D3.js */}\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,SAAS;AAAC;AAE9B,MAAMC,KAAK,GAAG,QAAsB;EAAA;EAAA,IAArB;IAAEC,KAAK;IAAEC;EAAM,CAAC;EAC7B,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,MAAMO,GAAG,GAAGL,EAAE,CAACM,MAAM,CAACF,MAAM,CAACG,OAAO,CAAC;;IAErC;IACA,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;;IAElB;IACA,MAAMC,UAAU,GAAGV,EAAE,CAACW,eAAe,CAACT,KAAK,CAAC,CACzCU,KAAK,CAAC,QAAQ,EAAEZ,EAAE,CAACa,aAAa,EAAE,CAAC,CACnCD,KAAK,CAAC,MAAM,EAAEZ,EAAE,CAACc,SAAS,CAACX,KAAK,CAAC,CAAC,CAClCS,KAAK,CAAC,GAAG,EAAEZ,EAAE,CAACe,MAAM,CAACP,KAAK,GAAG,CAAC,CAAC,CAAC,CAChCI,KAAK,CAAC,GAAG,EAAEZ,EAAE,CAACgB,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,CAAC;;IAEpC;IACA,MAAMQ,IAAI,GAAGZ,GAAG,CAACa,SAAS,CAAC,QAAQ,CAAC,CACjCC,IAAI,CAACjB,KAAK,CAAC,CACXkB,KAAK,EAAE,CAACC,MAAM,CAAC,QAAQ,CAAC,CACtBC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC;;IAE9B;IACA,MAAMC,IAAI,GAAGlB,GAAG,CAACa,SAAS,CAAC,MAAM,CAAC,CAC/BC,IAAI,CAAChB,KAAK,CAAC,CACXiB,KAAK,EAAE,CAACC,MAAM,CAAC,MAAM,CAAC,CACpBC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAC3BA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;IAE5B;IACAZ,UAAU,CAACc,EAAE,CAAC,MAAM,EAAE,MAAM;MAC1BP,IAAI,CAACK,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACC,CAAC,CAAC,CACpBJ,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACE,CAAC,CAAC;MAEzBJ,IAAI,CAACD,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACG,MAAM,CAACF,CAAC,CAAC,CAC3BJ,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACG,MAAM,CAACD,CAAC,CAAC,CAC3BL,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACI,MAAM,CAACH,CAAC,CAAC,CAC3BJ,IAAI,CAAC,IAAI,EAAEG,CAAC,IAAIA,CAAC,CAACI,MAAM,CAACF,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzB,KAAK,EAAEC,KAAK,CAAC,CAAC;EAElB,oBACE;IAAK,GAAG,EAAEC,MAAO;IAAC,KAAK,EAAC,MAAM;IAAC,MAAM,EAAC,KAAK;IAAA,uBACzC;MAAG,SAAS,EAAC;IAAmB;MAAA;MAAA;MAAA;IAAA;EAE5B;IAAA;IAAA;IAAA;EAAA,QACA;AAEV,CAAC;AAAC,GAlDIH,KAAK;AAAA,KAALA,KAAK;AAoDX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}